{"version":3,"sources":["components/with-spinner/with-spinner.styles.jsx","components/with-spinner/with-spinner.component.jsx","components/post-list/badgeUtil.js","components/post-list/post-list.component.jsx","pages/home-page/home-page.component.jsx","components/message-box/message-box.styles.js","components/message-box/message-box.component.jsx","pages/post-page/post-page.component.jsx","redux/post/post.types.js","redux/post/post.actions.js","components/post-editor/post-editor.component.jsx","components/maintain-post-list/MaintainPostListDrawer.jsx","pages/update-page/update-page.component.jsx","app.jsx","redux/post/post.reducer.js","redux/root-reduer.js","redux/post/post.sagas.js","constants.js","redux/root-saga.js","redux/store.js","index.jsx"],"names":["SpinnerOverlay","styled","div","SpinnerContainer","WithSpinner","WrappedComponent","isLoading","otherProps","getProperTitle","raw","last","matchAll","parseBadges","rawBadgesQuery","match","length","rawBadges","matches","compact","map","KEY_WORDS","renderBadge","badgeName","includes","lowerCase","className","PostList","eligiblePosts","posts","filter","post","title","sort","Container","Grid","container","direction","justify","alignItems","spacing","_id","item","xs","md","CardContainer","key","to","Card","square","CardContent","Typography","component","variant","badges","proper","color","renderTitle","strings","connect","state","align","typeSpeed","backSpeed","loop","href","MessageBoxContainer","MessageBoxMessage","p","MessageBox","message","postID","params","find","useEffect","window","MathJax","typeset","AppBar","position","Toolbar","IconButton","Home","style","source","body","PostActionTypes","FETCH_ALL_POSTS_START","FETCH_ALL_POSTS_SUCCESS","FETCH_ALL_POSTS_FAILURE","UPDATE_POST_START","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","CREATE_POST_START","CREATE_POST_SUCCESS","CREATE_POST_FAILURE","DELETE_POST_START","DELETE_POST_SUCCESS","DELETE_POST_FAILURE","updatePostSuccess","type","payload","require","id","dispatch","updatePost","updatePostStart","createPost","createPostStart","deletePost","deletePostStart","useState","currPost","setCurrPost","updatePostBody","value","handlePostChange","a","display","marginTop","flexDirection","FormControl","fullWidth","InputLabel","htmlFor","OutlinedInput","onChange","event","target","name","labelWidth","flexGrow","ButtonGroup","Button","onClick","confirm","options","mode","lineNumbers","theme","extraKeys","Enter","lineWrapping","onBeforeChange","editor","data","MaintainPostListDrawer","open","close","Drawer","anchor","padding","flexFlow","size","List","ListItem","button","ListItemText","Divider","compose","withRouter","drawerOpen","setDrawer","MenuOpen","path","exact","Paper","gutterBottom","PostEditor","errorMessage","synced","HomePage","PostPage","UpdatePage","INITIAL_STATE","postReducer","action","rootReducer","combineReducers","fetchAllPosts","onUpdatePostStart","onCreatePostStart","onDeletePostStart","postSagas","ROUTE","axios","get","put","reverse","delete","takeLatest","all","rootSaga","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","logger","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.984a0966.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const SpinnerOverlay = styled.div`\n  height: 60vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const SpinnerContainer = styled.div`\n  display: inline-block;\n  width: 50px;\n  height: 50px;\n  border: 3px solid rgba(195, 195, 195, 0.6);\n  border-radius: 50%;\n  border-top-color: #636767;\n  animation: spin 1s ease-in-out infinite;\n  @keyframes spin {\n    to {\n          transform: rotate(360deg);\n    }\n  }\n`;","import React from 'react';\nimport {SpinnerContainer, SpinnerOverlay} from \"./with-spinner.styles\";\n\nconst WithSpinner = WrappedComponent =>\n    ({isLoading, ...otherProps}) => {\n        return isLoading ? (\n            <SpinnerOverlay>\n                <SpinnerContainer/>\n            </SpinnerOverlay>\n        ) : (\n            <WrappedComponent {...otherProps} />\n        )\n    };\n\nexport default WithSpinner;","import { compact, last } from \"lodash\";\n\nexport function getProperTitle(raw) {\n  const badgePrefixRe = /^(\\[[^\\]\\[]+]\\s*)*(.*)/g;\n  return last([...raw.matchAll(badgePrefixRe)][0]);\n}\n\n// Input: \"[Pin] [LeetCode] Let's think about A[i]\"\n// Output: [\"Pin\", \"LeetCode\"]\nexport function parseBadges(raw) {\n  const badgePrefixRe = /^(\\[[^\\]\\[]+]\\s*)*/g;\n  const rawBadgesQuery = raw.match(badgePrefixRe);\n  if (rawBadgesQuery.length === 0) {\n    return [];\n  }\n  const rawBadges = rawBadgesQuery[0];\n  const singleBadgeRe = /\\[([^\\[\\]]*)]/g;\n  const matches = [...rawBadges.matchAll(singleBadgeRe)];\n  return compact(matches.map((match) => match[1]));\n}\n\nexport function isBadgeIncludedInTitle(badgeName, title) {\n  return parseBadges(title).includes(badgeName);\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { getProperTitle, parseBadges } from \"./badgeUtil\";\nimport { lowerCase } from \"lodash\";\nimport {\n  Card,\n  CardContent,\n  Container,\n  Grid,\n  Typography,\n} from \"@material-ui/core\";\nimport styled from \"styled-components\";\n\nconst KEY_WORDS = [\"pin\", \"hidden\"];\n\nfunction renderTitle(title) {\n  const badges = parseBadges(title);\n  const proper = getProperTitle(title);\n  return (\n    <Typography color={\"textPrimary\"}>\n      {badges.map(renderBadge)} <br /> {proper}\n    </Typography>\n  );\n}\n\nfunction renderBadge(badgeName) {\n  if (KEY_WORDS.includes(lowerCase(badgeName))) {\n    return null;\n  }\n  return <span className={`badge badge-light`}>{badgeName}</span>;\n}\n\nconst PostList = ({ posts }) => {\n  const eligiblePosts = posts\n    .filter(\n      (post) => !parseBadges(post.title).map(lowerCase).includes(\"hidden\")\n    )\n    .sort((post) =>\n      parseBadges(post.title).map(lowerCase).includes(\"pin\") ? -1 : 0\n    );\n\n  return (\n    <Container>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"flex-start\"\n        alignItems=\"center\"\n        spacing={1}\n      >\n        {eligiblePosts.map(({ _id, title }) => (\n          <Grid item xs={12} md={6}>\n            <CardContainer>\n              <Link key={_id} to={`/post/${_id}`}>\n                <Card square>\n                  <CardContent>\n                    <Typography component=\"h5\" variant=\"body2\">\n                      {renderTitle(title)}\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </Link>\n            </CardContainer>\n          </Grid>\n        ))}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default PostList;\n\nconst CardContainer = styled.div`\n  flex-grow: 1;\n`;\n","import React from \"react\";\nimport PostList from \"../../components/post-list/post-list.component\";\nimport { connect } from \"react-redux\";\nimport Typed from \"react-typed\";\nimport { Link } from \"react-router-dom\";\nimport { Container, Typography } from \"@material-ui/core\";\n\nconst strings = [\n  \"Frontend Developer at Faire\",\n  \"University of Waterloo Alumnus\",\n  \"Big Fan of Algorithms, Data Structures\",\n];\n\nconst HomePage = ({ posts }) => {\n  return (\n    <Container>\n      <Typography\n        className={\"mt-5\"}\n        align={\"center\"}\n        variant={\"h3\"}\n        color={\"textPrimary\"}\n        component={\"h1\"}\n      >\n        JUDE GAO\n      </Typography>\n      <p className={\"text-center\"}>\n        <code>\n          <Typed strings={strings} typeSpeed={60} backSpeed={20} loop />\n        </code>\n      </p>\n      <PostList posts={posts} />\n      <p\n        className={\n          \"text-center text-uppercase font-weight-bold text-secondary mt-5\"\n        }\n      >\n        <Link to={\"/maintain\"} className={`nav-link`} href=\"#\">\n          <Typography color={\"textSecondary\"}>Manage Contents</Typography>\n        </Link>\n      </p>\n    </Container>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  posts: state.post.posts,\n});\n\nexport default connect(mapStateToProps)(HomePage);\n","import styled from 'styled-components'\n\nexport const MessageBoxContainer = styled.div`\n    border: 1px red solid;\n    width: 100%;\n`\n\nexport const MessageBoxMessage = styled.p`\n    text-align: center;\n`","import React from 'react'\nimport { MessageBoxContainer, MessageBoxMessage } from './message-box.styles'\n\nconst MessageBox = ({ message }) => (\n    <MessageBoxContainer>\n        <MessageBoxMessage>\n            {message}\n        </MessageBoxMessage>\n    </MessageBoxContainer>\n)\n\nexport default MessageBox","import React, { useEffect } from \"react\";\nimport MessageBox from \"../../components/message-box/message-box.component\";\nimport { connect } from \"react-redux\";\nimport \"./post-page.styles.scss\";\nimport ReactMarkdown from \"react-markdown\";\nimport {\n  AppBar,\n  Container,\n  IconButton,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport { Home } from \"@material-ui/icons\";\nimport { Link } from \"react-router-dom\";\nimport { getProperTitle } from \"../../components/post-list/badgeUtil\";\n\nconst PostPage = ({ post }) => {\n  useEffect(() => {\n    window.MathJax.typeset();\n  }, [post]);\n\n  if (post)\n    return (\n      <>\n        <AppBar color={\"primary\"} variant={\"elevation\"} position=\"sticky\">\n          <Toolbar>\n            <Link to={\"/\"}>\n              <IconButton>\n                <Home style={{ color: \"white\" }} />\n              </IconButton>\n            </Link>\n            <Typography variant=\"body2\" align={\"center\"}>\n              {getProperTitle(post.title)}\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Container>\n          <div className={\"markdown-body mt-5\"}>\n            <ReactMarkdown source={post.body} />\n          </div>\n        </Container>\n      </>\n    );\n  else\n    return (\n      <MessageBox\n        message={`Please check the URL, since the post is not found in the database.`}\n      />\n    );\n};\n\nconst mapStateToProps = (\n  state,\n  {\n    match: {\n      params: { postID },\n    },\n  }\n) => ({\n  post: state.post.posts.find((p) => p._id === postID),\n});\n\nexport default connect(mapStateToProps)(PostPage);\n","const PostActionTypes = {\n    FETCH_ALL_POSTS_START: 'FETCH_ALL_POSTS_START',\n    FETCH_ALL_POSTS_SUCCESS: 'FETCH_ALL_POSTS_SUCCESS',\n    FETCH_ALL_POSTS_FAILURE: 'FETCH_ALL_POSTS_FAILURE',\n    UPDATE_POST_START: 'UPDATE_POST_START',\n    UPDATE_POST_SUCCESS: 'UPDATE_POST_SUCCESS',\n    UPDATE_POST_FAILURE: 'UPDATE_POST_FAILURE',\n    CREATE_POST_START: 'CREATE_POST_START',\n    CREATE_POST_SUCCESS: 'CREATE_POST_SUCCESS',\n    CREATE_POST_FAILURE: 'CREATE_POST_FAILURE',\n    DELETE_POST_START: 'DELETE_POST_START',\n    DELETE_POST_SUCCESS: 'DELETE_POST_SUCCESS',\n    DELETE_POST_FAILURE: 'DELETE_POST_FAILURE'\n}\n\nexport default PostActionTypes;\n","import PostActionTypes from \"./post.types\";\n\nexport const fetchPostStart = () => ({\n    type: PostActionTypes.FETCH_ALL_POSTS_START\n})\n\nexport const fetchPostSuccess = (posts) => ({\n    type: PostActionTypes.FETCH_ALL_POSTS_SUCCESS,\n    payload: posts\n})\n\nexport const fetchPostFailure = (errorMessage) => ({\n    type: PostActionTypes.FETCH_ALL_POSTS_FAILURE,\n    payload: errorMessage\n})\n\nexport const updatePostStart = (postID, post) => ({\n    type: PostActionTypes.UPDATE_POST_START,\n    payload: {\n        postID,\n        post\n    }\n})\n\nexport const updatePostSuccess = (postID, post) => ({\n    type: PostActionTypes.UPDATE_POST_SUCCESS,\n    payload: {\n        postID,\n        post\n    }\n})\n\nexport const updatePostFailure = (errorMessage) => ({\n    type: PostActionTypes.UPDATE_POST_FAILURE,\n    payload: errorMessage\n})\n\n\nexport const createPostStart = (title, body) => ({\n    type: PostActionTypes.CREATE_POST_START,\n    payload: {\n        title,\n        body\n    }\n})\n\nexport const createPostSuccess = (post) => ({\n    type: PostActionTypes.CREATE_POST_SUCCESS,\n    payload: post\n})\n\nexport const createPostFailure = (errorMessage) => ({\n    type: PostActionTypes.CREATE_POST_FAILURE,\n    payload: errorMessage\n})\n\nexport const deletePostStart = (postID) => ({\n    type: PostActionTypes.DELETE_POST_START,\n    payload: postID\n})\n\nexport const deletePostSuccess = (postID) => ({\n    type: PostActionTypes.DELETE_POST_SUCCESS,\n    payload: postID\n})\n\nexport const deletePostFailure = (errorMessage) => ({\n    type: PostActionTypes.DELETE_POST_FAILURE,\n    payload: errorMessage\n})","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  createPostStart,\n  deletePostStart,\n  updatePostStart,\n} from \"../../redux/post/post.actions\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\nimport \"./post-editor.styles.css\";\nimport {\n  Button,\n  ButtonGroup,\n  Container,\n  FormControl,\n  Grid,\n  InputLabel,\n  OutlinedInput,\n} from \"@material-ui/core\";\n\nrequire(\"codemirror/lib/codemirror\");\nrequire(\"codemirror/mode/markdown/markdown\");\nrequire(\"codemirror/addon/edit/continuelist\");\n\nconst PostEditor = ({ post, updatePost, createPost, deletePost, id }) => {\n  const [currPost, setCurrPost] = useState({ title: \"\", body: \"\" });\n\n  useEffect(() => {\n    if (post) setCurrPost(post);\n  }, [post]);\n\n  const handleChangeGeneric = (event) => {\n    const {\n      target: { name, value },\n    } = event;\n    setCurrPost({\n      ...currPost,\n      [name]: value,\n    });\n  };\n\n  const updatePostBody = (value) => {\n    setCurrPost({\n      ...currPost,\n      body: value,\n    });\n  };\n\n  const { title, body } = currPost;\n\n  const handlePostChange = async () => {\n    if (id) {\n      updatePost(id, currPost);\n    } else {\n      createPost(title, body);\n    }\n  };\n\n  return (\n    <Container\n      style={{\n        display: \"flex\",\n        marginTop: 10,\n        flexDirection: \"column\",\n      }}\n    >\n      <FormControl\n        fullWidth\n        variant=\"outlined\"\n        style={{ display: \"flex\", flexDirection: \"row\" }}\n      >\n        <InputLabel htmlFor=\"outlined-adornment-amount\">Title</InputLabel>\n        <OutlinedInput\n          id=\"outlined-adornment-amount\"\n          value={title}\n          onChange={handleChangeGeneric}\n          labelWidth={40}\n          name={\"title\"}\n          style={{\n            flexGrow: 1,\n          }}\n        />\n        <ButtonGroup variant=\"contained\">\n          <Button onClick={handlePostChange}>{id ? \"Update\" : \"Create\"}</Button>\n          {id ? (\n            <Button\n              color={\"primary\"}\n              onClick={async () => {\n                if (window.confirm(\"Do you want to delete this post-page?\")) {\n                  deletePost(id);\n                }\n              }}\n            >\n              Delete\n            </Button>\n          ) : null}\n        </ButtonGroup>\n      </FormControl>\n      <Grid item>\n        <CodeMirror\n          value={body}\n          options={{\n            mode: \"markdown\",\n            lineNumbers: true,\n            theme: \"idea\",\n            extraKeys: { Enter: \"newlineAndIndentContinueMarkdownList\" },\n            lineWrapping: true,\n          }}\n          name=\"body\"\n          onBeforeChange={(editor, data, value) => {\n            updatePostBody(value);\n          }}\n          onChange={(editor, data, value) => {\n            updatePostBody(value);\n          }}\n        />\n      </Grid>\n    </Container>\n  );\n};\n\nconst mapStateToProps = (\n  state,\n  {\n    match: {\n      params: { id },\n    },\n  }\n) => ({\n  post: state.post.posts.find((p) => p._id === id),\n  id,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updatePost: (postID, post) => dispatch(updatePostStart(postID, post)),\n  createPost: (title, body) => dispatch(createPostStart(title, body)),\n  deletePost: (postID) => dispatch(deletePostStart(postID)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostEditor);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Button,\n  Container,\n  Divider,\n  Drawer,\n  List,\n  ListItem,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\nimport { getProperTitle } from \"../post-list/badgeUtil\";\n\nexport const MaintainPostListDrawer = ({ posts, open, close }) => {\n  return (\n    <Drawer open={open} anchor={\"left\"} onClick={close}>\n      <Container\n        style={{\n          padding: 10,\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            flexFlow: \"row-reverse\",\n          }}\n        >\n          <Button size={\"large\"} color={\"primary\"}>\n            Close\n          </Button>\n        </div>\n        <List>\n          <Link to={`/`}>\n            <ListItem button>\n              <ListItemText>\n                <Typography color={\"primary\"}>Go to Home Page</Typography>\n              </ListItemText>\n            </ListItem>\n          </Link>\n          <Link to={`/maintain/posts/create`}>\n            <ListItem button>\n              <ListItemText>\n                <Typography color={\"primary\"}>New Document</Typography>\n              </ListItemText>\n            </ListItem>\n          </Link>\n          <Divider />\n          {posts.map(({ _id, title }) => (\n            <Link key={_id} to={`/maintain/posts/edit/${_id}`}>\n              <ListItem button>\n                <ListItemText>\n                  <Typography color={\"textSecondary\"}>\n                    {getProperTitle(title)}\n                  </Typography>\n                </ListItemText>\n              </ListItem>\n            </Link>\n          ))}\n        </List>\n      </Container>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Route, withRouter } from \"react-router-dom\";\nimport PostEditor from \"../../components/post-editor/post-editor.component\";\nimport { connect } from \"react-redux\";\nimport { MaintainPostListDrawer } from \"../../components/maintain-post-list/MaintainPostListDrawer\";\nimport { compose } from \"redux\";\nimport {\n  AppBar,\n  Container,\n  IconButton,\n  Paper,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport { Home, MenuOpen } from \"@material-ui/icons\";\n\nconst UpdatePage = ({ posts }) => {\n  const [drawerOpen, setDrawer] = useState(false);\n  return (\n    <>\n      <AppBar color={\"primary\"} position=\"sticky\">\n        <Toolbar>\n          <IconButton onClick={() => setDrawer(true)}>\n            <MenuOpen style={{ color: \"white\" }} />\n          </IconButton>\n          <Typography variant=\"body2\" align={\"center\"}>\n            Jude's Content Manager\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <MaintainPostListDrawer\n        posts={posts}\n        open={drawerOpen}\n        close={() => setDrawer(false)}\n      />\n      <div>\n        <Route path={\"/maintain\"} exact>\n          <Container\n            style={{\n              marginTop: 40,\n            }}\n          >\n            <Paper\n              style={{\n                padding: 40,\n              }}\n            >\n              <Typography\n                align={\"center\"}\n                variant={\"h4\"}\n                color={\"textPrimary\"}\n                component={\"h1\"}\n                gutterBottom\n              >\n                Welcome to Jude's Content Manager\n              </Typography>\n              <Typography variant={\"body1\"} color={\"textSecondary\"}>\n                Click the top left icon to open up the menu, where you can{\" \"}\n                <strong>create a post</strong>,{\" \"}\n                <strong>edit the existent posts</strong>, or even{\" \"}\n                <strong>go back to the home page</strong>!\n              </Typography>\n            </Paper>\n          </Container>\n        </Route>\n        <Route path=\"/maintain/posts/create\" component={PostEditor} />\n        <Route path={\"/maintain/posts/edit/:id\"} component={PostEditor} />\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  posts: state.post.posts,\n});\n\nexport default compose(connect(mapStateToProps), withRouter)(UpdatePage);\n","import React from \"react\";\nimport WithSpinner from \"./components/with-spinner/with-spinner.component\";\nimport { compose } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { Route, Link } from \"react-router-dom\";\nimport HomePage from \"./pages/home-page/home-page.component\";\nimport PostPage from \"./pages/post-page/post-page.component\";\nimport UpdatePage from \"./pages/update-page/update-page.component\";\n\nconst App = ({ errorMessage }) => {\n  if (errorMessage) {\n    return (\n      <div>\n        <h1>{errorMessage}</h1>\n        <p>App is not in a normal state. Please refresh.</p>\n        <p>Jude Gao</p>\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <Route path=\"/\" exact component={HomePage} />\n        <Route path=\"/post/:postID\" component={PostPage} />\n        <Route path=\"/maintain\" component={UpdatePage} />\n      </div>\n    );\n  }\n};\n\nconst mapStateToProps = (state) => ({\n  isLoading: !state.post.errorMessage && state.post.synced === false,\n  errorMessage: state.post.errorMessage,\n});\n\nexport default compose(connect(mapStateToProps), WithSpinner)(App);\n","import PostActionTypes from \"./post.types\";\n\nconst INITIAL_STATE = {\n    posts: [],\n    synced: false,\n    errorMessage: null\n}\n\nconst postReducer = (state=INITIAL_STATE, action) => {\n    switch (action.type) {\n        case PostActionTypes.FETCH_ALL_POSTS_SUCCESS:\n            return {\n                ...state,\n                posts: action.payload,\n                synced: true\n            }\n        case PostActionTypes.UPDATE_POST_START:\n            return {\n                ...state,\n                synced: false\n            }\n        case PostActionTypes.UPDATE_POST_SUCCESS:\n            return {\n                ...state,\n                posts: state.posts.map((post) => {\n                    if (post._id === action.payload.postID) {\n                        return action.payload.post;\n                    } else {\n                        return post;\n                    }\n                }),\n                synced: true\n            }\n        case PostActionTypes.CREATE_POST_START:\n            return {\n                ...state,\n                synced: false\n            }\n        case PostActionTypes.CREATE_POST_SUCCESS:\n            return {\n                ...state,\n                synced: true,\n                posts: [ action.payload, ...state.posts ]\n            }\n        case PostActionTypes.DELETE_POST_START:\n            return {\n                ...state,\n                synced: false\n            }\n        case PostActionTypes.DELETE_POST_SUCCESS:\n            return {\n                ...state,\n                synced: true,\n                posts: state.posts.filter(post => post._id !== action.payload)\n            }\n\n        case PostActionTypes.FETCH_ALL_POSTS_FAILURE:\n        case PostActionTypes.UPDATE_POST_FAILURE:\n        case PostActionTypes.CREATE_POST_FAILURE:\n        case PostActionTypes.DELETE_POST_FAILURE:\n            return {\n                ...state,\n                errorMessage: action.payload\n            }\n\n        default:\n            return state\n    }\n}\n\nexport default postReducer;","import {combineReducers} from \"redux\";\nimport postReducer from \"./post/post.reducer\";\n\nconst rootReducer = combineReducers({\n    post: postReducer\n})\n\nexport default rootReducer;\n","import { all, takeLatest, put } from '@redux-saga/core/effects';\nimport PostActionTypes from './post.types';\nimport axios from 'axios';\nimport {\n  createPostFailure,\n  createPostSuccess,\n  deletePostFailure,\n  deletePostSuccess,\n  fetchPostFailure,\n  fetchPostSuccess,\n  updatePostFailure,\n  updatePostSuccess,\n} from './post.actions';\nimport {BASE_URL} from \"../../constants\";\n\nconst ROUTE = {\n  allPosts: 'post',\n  specificPost: (postID) => `post/${postID}`,\n};\n\nexport function* fetchAllPosts() {\n  try {\n    const { data } = yield axios.get(`${BASE_URL}/${ROUTE.allPosts}`);\n    yield put(fetchPostSuccess(data.reverse()));\n  } catch (e) {\n    yield put(fetchPostFailure(e.message));\n  }\n}\n\nexport function* onFetchPostStart() {\n  yield takeLatest(PostActionTypes.FETCH_ALL_POSTS_START, fetchAllPosts);\n}\n\nexport function* updatePost({ payload: { postID, post } }) {\n  try {\n    const { data } = yield axios.post(`${BASE_URL}/${ROUTE.specificPost(postID)}`, post);\n    yield put(updatePostSuccess(postID, data));\n  } catch (e) {\n    yield put(updatePostFailure(e.message));\n  }\n}\n\nexport function* createPost({ payload: { title, body } }) {\n  try {\n    const { data } = yield axios.post(`${BASE_URL}/${ROUTE.allPosts}`, { title, body });\n    yield put(createPostSuccess(data));\n  } catch (e) {\n    yield put(createPostFailure(e.message));\n  }\n}\n\nexport function* deletePost({ payload }) {\n  try {\n    yield axios.delete(`${BASE_URL}/${ROUTE.specificPost(payload)}`);\n    yield put(deletePostSuccess(payload));\n  } catch (e) {\n    yield put(deletePostFailure(e.message));\n  }\n}\n\nexport function* onUpdatePostStart() {\n  yield takeLatest(PostActionTypes.UPDATE_POST_START, updatePost);\n}\n\nexport function* onCreatePostStart() {\n  yield takeLatest(PostActionTypes.CREATE_POST_START, createPost);\n}\n\nexport function* onDeletePostStart() {\n  yield takeLatest(PostActionTypes.DELETE_POST_START, deletePost);\n}\n\nexport default function* postSagas() {\n  yield all([fetchAllPosts(), onUpdatePostStart(), onCreatePostStart(), onDeletePostStart()]);\n}\n","export const BASE_URL = process.env.NODE_ENV === 'production' ? '' : 'http://localhost';\n","import {all} from '@redux-saga/core/effects'\nimport postSagas from \"./post/post.sagas\";\n\nexport default function* rootSaga() {\n    yield all([\n        postSagas()\n    ])\n}\n","import {applyMiddleware, createStore} from \"redux\";\nimport rootReducer from \"./root-reduer\";\nimport {logger} from \"redux-logger\";\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from \"./root-saga\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(logger, sagaMiddleware)\n)\n\nsagaMiddleware.run(rootSaga)\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport { HashRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}