{"version":3,"sources":["components/with-spinner/with-spinner.styles.jsx","components/with-spinner/with-spinner.component.jsx","components/message-box/message-box.styles.js","components/message-box/message-box.component.jsx","components/post-list/post-list.component.jsx","pages/home-page/home-page.component.jsx","pages/post-page/post-page.component.jsx","redux/post/post.types.js","redux/post/post.actions.js","components/post-editor/post-editor.component.jsx","components/maintain-post-list/maintain-post-list.component.jsx","pages/update-page/update-page.component.jsx","components/nav-bar/nav-bar.component.jsx","app.jsx","redux/post/post.reducer.js","redux/root-reduer.js","constants.js","redux/post/post.sagas.js","redux/root-saga.js","redux/store.js","index.jsx"],"names":["SpinnerOverlay","styled","div","SpinnerContainer","WithSpinner","WrappedComponent","isLoading","otherProps","MessageBoxContainer","MessageBoxMessage","p","MessageBox","message","PostList","posts","length","filter","title","substr","map","_id","className","key","to","rest","split","block","tags","tag","style","marginRight","join","generateBadges","connect","state","post","postID","match","params","find","useEffect","window","MathJax","typeset","source","body","PostActionTypes","FETCH_ALL_POSTS_START","FETCH_ALL_POSTS_SUCCESS","FETCH_ALL_POSTS_FAILURE","UPDATE_POST_START","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","CREATE_POST_START","CREATE_POST_SUCCESS","CREATE_POST_FAILURE","DELETE_POST_START","DELETE_POST_SUCCESS","DELETE_POST_FAILURE","updatePostSuccess","type","payload","require","id","dispatch","updatePost","updatePostStart","createPost","createPostStart","deletePost","deletePostStart","useState","currPost","setCurrPost","updatePostBody","value","handlePostChange","a","name","onChange","event","target","options","mode","lineNumbers","theme","extraKeys","lineWrapping","onBeforeChange","editor","data","onClick","confirm","MaintainPostList","compose","withRouter","path","component","PostEditor","NavBar","collapsed","setCollapsed","href","errorMessage","synced","exact","HomePage","PostPage","UpdatePage","INITIAL_STATE","postReducer","action","rootReducer","combineReducers","BASE_URL","fetchAllPosts","onUpdatePostStart","onCreatePostStart","onDeletePostStart","postSagas","ROUTE","axios","get","put","reverse","delete","takeLatest","all","rootSaga","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","logger","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8b258d7e.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const SpinnerOverlay = styled.div`\n  height: 60vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const SpinnerContainer = styled.div`\n  display: inline-block;\n  width: 50px;\n  height: 50px;\n  border: 3px solid rgba(195, 195, 195, 0.6);\n  border-radius: 50%;\n  border-top-color: #636767;\n  animation: spin 1s ease-in-out infinite;\n  @keyframes spin {\n    to {\n          transform: rotate(360deg);\n    }\n  }\n`;","import React from 'react';\nimport {SpinnerContainer, SpinnerOverlay} from \"./with-spinner.styles\";\n\nconst WithSpinner = WrappedComponent =>\n    ({isLoading, ...otherProps}) => {\n        return isLoading ? (\n            <SpinnerOverlay>\n                <SpinnerContainer/>\n            </SpinnerOverlay>\n        ) : (\n            <WrappedComponent {...otherProps} />\n        )\n    };\n\nexport default WithSpinner;","import styled from 'styled-components'\n\nexport const MessageBoxContainer = styled.div`\n    border: 1px red solid;\n    width: 100%;\n`\n\nexport const MessageBoxMessage = styled.p`\n    text-align: center;\n`","import React from 'react'\nimport { MessageBoxContainer, MessageBoxMessage } from './message-box.styles'\n\nconst MessageBox = ({ message }) => (\n    <MessageBoxContainer>\n        <MessageBoxMessage>\n            {message}\n        </MessageBoxMessage>\n    </MessageBoxContainer>\n)\n\nexport default MessageBox","import React from 'react'\nimport MessageBox from \"../message-box/message-box.component\";\nimport {Link} from \"react-router-dom\";\n\nconst PostList = ({posts}) => {\n\n    const generateBadges = (title) => {\n        const rest = title.split(' ').filter(block => !(block[0] == '[' && block[block.length - 1] == ']'))\n        const tags = title.split(' ').filter(block => block[0] == '[' && block[block.length - 1] == ']');\n        return <span>\n            {\n                tags.map(tag => <span style={{\n                    marginRight: '10px'\n                }} className={`badge ${tag === \"[Pin]\" ? \"badge-danger\" : \"badge-light\"} `}>{ tag.substr(1, tag.length - 2) } </span>)\n            }\n            {rest.join(' ')}\n        </span>\n    }\n\n\n    if (posts && posts.length > 0) {\n        posts = [\n            ...posts.filter(({title}) => title.length >= 5 && title.substr(0, 5) === \"[Pin]\"),\n            ...posts.filter(({title}) => !(title.length >= 5 && title.substr(0, 5) === \"[Pin]\"))\n        ]\n\n        return (\n            <div>\n                {\n                    posts.map(\n                        ({_id, title}) =>\n                            <ul className={'list-group list-group-flush'} key={_id}>\n                                <Link className={'list-group-item text-secondary border-top  border-bottom my-2 m-50'} to={`/post/${_id}`}>\n                                    {generateBadges(title)}\n                                </Link>\n                            </ul>\n                    )\n                }\n            </div>\n        )\n    }\n    else\n        return <MessageBox message={'No posts in the database so far.'}/>\n}\n\n\nexport default PostList;","import React from 'react';\nimport PostList from \"../../components/post-list/post-list.component\";\nimport {connect} from \"react-redux\";\n\nconst HomePage = ({posts}) => {\n    return (\n        <div>\n            <h1 className={\"text-center display-5 mt-2 mb-3\"}>JUDE<small>'S BLOG</small></h1>\n            <PostList posts={posts}/>\n        </div>\n    )\n};\n\nconst mapStateToProps = state => ({\n    posts: state.post.posts\n})\n\nexport default connect(mapStateToProps)(HomePage);","import React, {useEffect} from 'react';\nimport MessageBox from \"../../components/message-box/message-box.component\";\nimport {connect} from \"react-redux\";\nimport './post-page.styles.scss';\nimport ReactMarkdown from \"react-markdown\";\n\nconst PostPage = ({post}) => {\n\n\n    useEffect(() => {\n        window.MathJax.typeset()\n    }, [post])\n\n    if (post)\n        return (\n            <div className={'markdown-body mt-5'}>\n                {/*<h1>{ post.title }</h1>*/}\n                <ReactMarkdown source={post.body} />\n            </div>\n        );\n    else return <MessageBox message={`Please check the URL, since the post is not found in the database.`}/>\n};\n\nconst mapStateToProps = (state, {match: {params: {postID}}}) => ({\n    post: state.post.posts.find(p => p._id === postID)\n})\n\nexport default connect(mapStateToProps)(PostPage);","const PostActionTypes = {\n    FETCH_ALL_POSTS_START: 'FETCH_ALL_POSTS_START',\n    FETCH_ALL_POSTS_SUCCESS: 'FETCH_ALL_POSTS_SUCCESS',\n    FETCH_ALL_POSTS_FAILURE: 'FETCH_ALL_POSTS_FAILURE',\n    UPDATE_POST_START: 'UPDATE_POST_START',\n    UPDATE_POST_SUCCESS: 'UPDATE_POST_SUCCESS',\n    UPDATE_POST_FAILURE: 'UPDATE_POST_FAILURE',\n    CREATE_POST_START: 'CREATE_POST_START',\n    CREATE_POST_SUCCESS: 'CREATE_POST_SUCCESS',\n    CREATE_POST_FAILURE: 'CREATE_POST_FAILURE',\n    DELETE_POST_START: 'DELETE_POST_START',\n    DELETE_POST_SUCCESS: 'DELETE_POST_SUCCESS',\n    DELETE_POST_FAILURE: 'DELETE_POST_FAILURE'\n}\n\nexport default PostActionTypes;\n","import PostActionTypes from \"./post.types\";\n\nexport const fetchPostStart = () => ({\n    type: PostActionTypes.FETCH_ALL_POSTS_START\n})\n\nexport const fetchPostSuccess = (posts) => ({\n    type: PostActionTypes.FETCH_ALL_POSTS_SUCCESS,\n    payload: posts\n})\n\nexport const fetchPostFailure = (errorMessage) => ({\n    type: PostActionTypes.FETCH_ALL_POSTS_FAILURE,\n    payload: errorMessage\n})\n\nexport const updatePostStart = (postID, post) => ({\n    type: PostActionTypes.UPDATE_POST_START,\n    payload: {\n        postID,\n        post\n    }\n})\n\nexport const updatePostSuccess = (postID, post) => ({\n    type: PostActionTypes.UPDATE_POST_SUCCESS,\n    payload: {\n        postID,\n        post\n    }\n})\n\nexport const updatePostFailure = (errorMessage) => ({\n    type: PostActionTypes.UPDATE_POST_FAILURE,\n    payload: errorMessage\n})\n\n\nexport const createPostStart = (title, body) => ({\n    type: PostActionTypes.CREATE_POST_START,\n    payload: {\n        title,\n        body\n    }\n})\n\nexport const createPostSuccess = (post) => ({\n    type: PostActionTypes.CREATE_POST_SUCCESS,\n    payload: post\n})\n\nexport const createPostFailure = (errorMessage) => ({\n    type: PostActionTypes.CREATE_POST_FAILURE,\n    payload: errorMessage\n})\n\nexport const deletePostStart = (postID) => ({\n    type: PostActionTypes.DELETE_POST_START,\n    payload: postID\n})\n\nexport const deletePostSuccess = (postID) => ({\n    type: PostActionTypes.DELETE_POST_SUCCESS,\n    payload: postID\n})\n\nexport const deletePostFailure = (errorMessage) => ({\n    type: PostActionTypes.DELETE_POST_FAILURE,\n    payload: errorMessage\n})","import React, {useEffect, useState} from 'react';\nimport {connect} from \"react-redux\";\nimport {createPostStart, deletePostStart, updatePostStart} from \"../../redux/post/post.actions\";\nimport {Controlled as CodeMirror} from 'react-codemirror2';\nimport \"./post-editor.styles.css\"\nrequire('codemirror/lib/codemirror')\nrequire('codemirror/mode/markdown/markdown');\nrequire('codemirror/addon/edit/continuelist')\n\nconst PostEditor = ({post, updatePost, createPost, deletePost, id}) => {\n\n    const [currPost, setCurrPost] = useState({ title: '', body: '' })\n\n    useEffect(() => {\n        if (post) setCurrPost(post)\n    }, [post])\n\n    const handleChangeGeneric = (event) => {\n        const { target: { name, value } } = event\n        setCurrPost({\n            ...currPost,\n            [name]: value\n        })\n    }\n\n    const updatePostBody = (value) => {\n        setCurrPost({\n            ...currPost,\n            body: value\n        })\n    }\n\n    const { title, body } = currPost\n\n    const handlePostChange = async () => {\n        if (id) {\n            updatePost(id, currPost)\n        } else {\n            createPost(title, body)\n        }\n    }\n\n    return (\n        <div>\n            <div>\n                Post Name:\n                <br/>\n                <input\n                    className={'form-control'}\n                    type=\"text\"\n                    value={title}\n                    name=\"title\"\n                    onChange={handleChangeGeneric}\n                />\n            </div>\n            <div>\n                Post Body:\n                <br/>\n                <CodeMirror\n                    value={body}\n                    options={{\n                        mode: 'markdown',\n                        lineNumbers: true,\n                        theme: \"eclipse\",\n                        extraKeys: {\"Enter\": \"newlineAndIndentContinueMarkdownList\"},\n                        lineWrapping: true\n                    }}\n                    name=\"body\"\n                    onBeforeChange={(editor, data, value) => {\n                        updatePostBody(value)\n                    }}\n                    onChange={(editor, data, value) => {\n                        updatePostBody(value)\n                    }}\n                />\n            </div>\n\n            <div className=\"btn-group\">\n                <button className={'btn btn-primary'} onClick={handlePostChange}>{ id ? 'Update' : 'Create'}</button>\n                {\n                    id ?\n                        <button className={'btn btn-danger'} onClick={async () => {\n                            if (window.confirm('Do you want to delete this post-page?')) {\n                                deletePost(id)\n                            }\n                        }\n                        }>Delete</button>\n                        : null\n                }\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state, {match: { params: { id } }}) => ({\n    post: state.post.posts.find(p => p._id === id),\n    id\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    updatePost: (postID, post) => dispatch(updatePostStart(postID, post)),\n    createPost: (title, body) => dispatch(createPostStart(title, body)),\n    deletePost: (postID) => dispatch(deletePostStart(postID))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostEditor);","import React from 'react';\nimport {Link} from \"react-router-dom\";\n\nconst MaintainPostList = ({ posts }) => {\n    return (\n        <div style={{\n            'maxHeight': '65vh',\n            'overflowY': 'auto'\n        }}>\n            <ul className={'list-group'}>\n                {\n                    posts.map(({_id, title}) =>\n                        <Link key={_id} to={`/maintain/posts/edit/${_id}`} className={'list-group-item'}>\n                            { title }\n                        </Link>\n                    )\n                }\n            </ul>\n        </div>\n    );\n};\n\nexport default MaintainPostList;","import React  from 'react';\nimport {Link, Route, withRouter} from \"react-router-dom\";\nimport PostEditor from \"../../components/post-editor/post-editor.component\";\nimport {connect} from \"react-redux\";\nimport MaintainPostList from \"../../components/maintain-post-list/maintain-post-list.component\";\nimport {compose} from \"redux\";\n\nconst UpdatePage = ({posts}) => {\n    return (\n        <div>\n            <h2>Update Posts</h2>\n            <div className=\"fluid-container\">\n                <div className=\"row\">\n                    <div className={'col-md-2'}>\n                        <div className=\"btn-group\">\n                            <Link to={'/maintain/posts/create'} className={'btn btn-primary'}>Create</Link>\n                        </div>\n\n                        <MaintainPostList posts={posts} />\n                    </div>\n\n                    <div className={'col-md-10'}>\n                        <div>\n                            <Route path='/maintain/posts/create' component={PostEditor}/>\n                            <Route\n                                path={'/maintain/posts/edit/:id'}\n                                component={PostEditor}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    posts: state.post.posts\n})\n\nexport default compose(connect(mapStateToProps), withRouter)(UpdatePage);","import React, {useState} from 'react';\nimport {Link} from \"react-router-dom\";\n\nconst NavBar = () => {\n    const [collapsed, setCollapsed] = useState(true)\n    return (\n        <nav className=\"navbar-light navbar navbar-expand-sm  bg-light\">\n            <div className=\"container\">\n                <a className=\"navbar-brand font-weight-bold text-uppercase\" href=\"#\">Jude Gao</a>\n                <button\n                    onClick={() => {\n                        setCollapsed(!collapsed)\n                    }}\n                    className=\"navbar-toggler\" type=\"button\" >\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className={`${ collapsed ? 'collapse' : ''} navbar-collapse`}>\n                    <ul className=\"navbar-nav ml-auto\">\n                        <li className=\"nav-item mx-1 text-uppercase\">\n                            <Link to={'/'} className=\"nav-link\" href=\"#\">Home</Link>\n                        </li>\n                        <li className=\"nav-item mx-1 text-uppercase\">\n                            <Link\n                                to={'/maintain'}\n                                className={`nav-link`} href=\"#\">Config</Link>\n                        </li>\n                        <li className='nav-item mx-1 bg-secondary text-uppercase'>\n                            <a href=\"/resume.pdf\" target={'_blank'} className={`nav-link text-light`}>Résumé</a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n\n        </nav>\n    );\n};\n\nexport default NavBar;","import React from 'react'\nimport WithSpinner from \"./components/with-spinner/with-spinner.component\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {Route} from \"react-router-dom\";\nimport HomePage from \"./pages/home-page/home-page.component\";\nimport PostPage from \"./pages/post-page/post-page.component\";\nimport UpdatePage from \"./pages/update-page/update-page.component\";\nimport NavBar from \"./components/nav-bar/nav-bar.component\";\n\nconst App = ({errorMessage}) => {\n    if (errorMessage) {\n        return <div>\n            <h1>{errorMessage}</h1>\n            <p>App is not in a normal state. Please refresh.</p>\n            <p>Jude Gao</p>\n        </div>\n    } else {\n        return (\n            <div>\n                <NavBar />\n                <div className={'container'}>\n                    <Route path='/' exact component={HomePage}/>\n                    <Route path='/post/:postID' component={PostPage}/>\n                </div>\n                <Route path='/maintain' component={UpdatePage}/>\n                <p className={\"text-center text-uppercase font-weight-bold text-secondary mt-5\"}>&copy; 2020 Jude Gao</p>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    isLoading: (!state.post.errorMessage) && state.post.synced === false,\n    errorMessage: state.post.errorMessage\n})\n\nexport default compose(connect(mapStateToProps), WithSpinner)(App)","import PostActionTypes from \"./post.types\";\n\nconst INITIAL_STATE = {\n    posts: [],\n    synced: false,\n    errorMessage: null\n}\n\nconst postReducer = (state=INITIAL_STATE, action) => {\n    switch (action.type) {\n        case PostActionTypes.FETCH_ALL_POSTS_SUCCESS:\n            return {\n                ...state,\n                posts: action.payload,\n                synced: true\n            }\n        case PostActionTypes.UPDATE_POST_START:\n            return {\n                ...state,\n                synced: false\n            }\n        case PostActionTypes.UPDATE_POST_SUCCESS:\n            return {\n                ...state,\n                posts: state.posts.map((post) => {\n                    if (post._id === action.payload.postID) {\n                        return action.payload.post;\n                    } else {\n                        return post;\n                    }\n                }),\n                synced: true\n            }\n        case PostActionTypes.CREATE_POST_START:\n            return {\n                ...state,\n                synced: false\n            }\n        case PostActionTypes.CREATE_POST_SUCCESS:\n            return {\n                ...state,\n                synced: true,\n                posts: [ action.payload, ...state.posts ]\n            }\n        case PostActionTypes.DELETE_POST_START:\n            return {\n                ...state,\n                synced: false\n            }\n        case PostActionTypes.DELETE_POST_SUCCESS:\n            return {\n                ...state,\n                synced: true,\n                posts: state.posts.filter(post => post._id !== action.payload)\n            }\n\n        case PostActionTypes.FETCH_ALL_POSTS_FAILURE:\n        case PostActionTypes.UPDATE_POST_FAILURE:\n        case PostActionTypes.CREATE_POST_FAILURE:\n        case PostActionTypes.DELETE_POST_FAILURE:\n            return {\n                ...state,\n                errorMessage: action.payload\n            }\n\n        default:\n            return state\n    }\n}\n\nexport default postReducer;","import {combineReducers} from \"redux\";\nimport postReducer from \"./post/post.reducer\";\n\nconst rootReducer = combineReducers({\n    post: postReducer\n})\n\nexport default rootReducer;\n","export const BASE_URL = 'http://localhost';","import { all, takeLatest, put } from '@redux-saga/core/effects';\nimport PostActionTypes from './post.types';\nimport axios from 'axios';\nimport {\n  createPostFailure,\n  createPostSuccess,\n  deletePostFailure,\n  deletePostSuccess,\n  fetchPostFailure,\n  fetchPostSuccess,\n  updatePostFailure,\n  updatePostSuccess,\n} from './post.actions';\nimport {BASE_URL} from \"../../constants\";\n\nconst ROUTE = {\n  allPosts: 'post',\n  specificPost: (postID) => `post/${postID}`,\n};\n\nexport function* fetchAllPosts() {\n  try {\n    const { data } = yield axios.get(`${BASE_URL}/${ROUTE.allPosts}`);\n    yield put(fetchPostSuccess(data.reverse()));\n  } catch (e) {\n    yield put(fetchPostFailure(e.message));\n  }\n}\n\nexport function* onFetchPostStart() {\n  yield takeLatest(PostActionTypes.FETCH_ALL_POSTS_START, fetchAllPosts);\n}\n\nexport function* updatePost({ payload: { postID, post } }) {\n  try {\n    const { data } = yield axios.post(`${BASE_URL}/${ROUTE.specificPost(postID)}`, post);\n    yield put(updatePostSuccess(postID, data));\n  } catch (e) {\n    yield put(updatePostFailure(e.message));\n  }\n}\n\nexport function* createPost({ payload: { title, body } }) {\n  try {\n    const { data } = yield axios.post(`${BASE_URL}/${ROUTE.allPosts}`, { title, body });\n    yield put(createPostSuccess(data));\n  } catch (e) {\n    yield put(createPostFailure(e.message));\n  }\n}\n\nexport function* deletePost({ payload }) {\n  try {\n    yield axios.delete(`${BASE_URL}/${ROUTE.specificPost(payload)}`);\n    yield put(deletePostSuccess(payload));\n  } catch (e) {\n    yield put(deletePostFailure(e.message));\n  }\n}\n\nexport function* onUpdatePostStart() {\n  yield takeLatest(PostActionTypes.UPDATE_POST_START, updatePost);\n}\n\nexport function* onCreatePostStart() {\n  yield takeLatest(PostActionTypes.CREATE_POST_START, createPost);\n}\n\nexport function* onDeletePostStart() {\n  yield takeLatest(PostActionTypes.DELETE_POST_START, deletePost);\n}\n\nexport default function* postSagas() {\n  yield all([fetchAllPosts(), onUpdatePostStart(), onCreatePostStart(), onDeletePostStart()]);\n}\n","import {all} from '@redux-saga/core/effects'\nimport postSagas from \"./post/post.sagas\";\n\nexport default function* rootSaga() {\n    yield all([\n        postSagas()\n    ])\n}\n","import {applyMiddleware, createStore} from \"redux\";\nimport rootReducer from \"./root-reduer\";\nimport {logger} from \"redux-logger\";\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from \"./root-saga\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(logger, sagaMiddleware)\n)\n\nsagaMiddleware.run(rootSaga)\n\nexport default store;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\nimport './index.css'\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\nimport {HashRouter as Router} from \"react-router-dom\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <App/>\n        </Router>\n    </Provider>, document.getElementById('root'))"],"sourceRoot":""}